# # This is a basic workflow to help you get started with Actions

# name: Deploy to Raspberry Pi

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# env:
#   FLASK_APP: app.py

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: self-hosted

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

#       # Setup virtual env, install dependencies
#       - name: Create new virtual env and activate it
#         run: |
#           python3 -m venv flask-env
#           source flask-env/bin/activate
#           python3 -m pip install -r requirements.txt
#           python3 -m pip install gunicorn

#   deploy:
#     runs-on: self-hosted
#     needs: build
    
#     steps:
#       # Kill gunicorn server, if running already
#       - name: Kill gunicorn
#         run: pkill gunicorn || true

#       # Run gunicorn server
#       - name: Run gunicorn
#         run: |
#           source flask-env/bin/activate
#           RUNNER_TRACKING_ID=""
#           gunicorn -w 1 -b 0.0.0.0:4000 app:app -D --log-file=gunicorn.log

# This is a basic workflow to help you get started with Actions

name: Deploy to Raspberry Pi

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    
    outputs:
      tag_name: ${{ steps.set_tag_name.outputs.tag_name }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set TAG_NAME
        id: set_tag_name
        run: echo "::set-output name=tag_name::$(date +%s)"
        
      - name: Create a docker image
        run: |
          cd src/
          docker build -t rpi-cd-tutorial:${{ steps.set_tag_name.outputs.tag_name }} .

  deploy:
    runs-on: self-hosted
    needs: build
    
    steps:
      - name: Stop and remove existing container
        run: docker stop rpi-app && docker rm rpi-app || true
        
      - name: Run the docker image
        run: docker run --name rpi-app -d -p 4000:4000 rpi-cd-tutorial:${{ needs.build.outputs.tag_name }}

